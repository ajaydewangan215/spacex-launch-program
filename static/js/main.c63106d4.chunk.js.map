{"version":3,"sources":["components/Footer.jsx","App.js","components/redux/reducers/DataReducer.js","components/redux/reducers/index.js","components/redux/store.js","serviceWorker.js","index.js","components/redux/constants/types.js"],"names":["Footer","LeftSection","lazy","RightSection","App","className","fallback","initialData","dataList","DataReducer","state","action","type","types","FETCH_DATA","payload","reducers","combineReducers","allData","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","isLocalhost","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","config","navigator","URL","process","href","origin","addEventListener","setTimeout","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","register","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","registerValidSW","checkValidServiceWorker"],"mappings":"2MAUeA,EARA,WACX,OACI,mECDFC,EAAcC,gBAAK,kBAAM,sDACzBC,EAAeD,gBAAK,kBAAM,sDAmBjBE,MAjBf,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,wBAAQA,UAAU,SAAlB,SACE,0DAEF,qBAAKA,UAAU,OAAf,SACE,eAAC,WAAD,CAAUC,SAAU,6CAApB,UACE,cAACL,EAAD,IACA,cAACE,EAAD,SAGJ,cAAC,EAAD,Q,4BChBAI,EAAc,CAChBC,SAAU,IAYCC,EATK,WAAgC,IAA/BC,EAA8B,uDAAxBH,EAAaI,EAAW,uCAC/C,OAAQA,EAAOC,MACX,KAAKC,IAAMC,WACP,OAAO,2BAAIJ,GAAX,IAAkBF,SAASG,EAAOI,UACtC,QACI,OAAOL,ICJJM,EAJEC,YAAgB,CAC7BC,QAAST,ICCEU,EAFDC,YAAYJ,EAAU,GAAIK,OAAOC,8BAAgCD,OAAOC,gCCHhFC,EAAcC,QACa,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCCRC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDHnB,SAAkBC,GAErB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIC,IAAIC,yBAAwBd,OAAOI,SAASW,MACpDC,SAAWhB,OAAOI,SAASY,OAIrC,OAGJhB,OAAOiB,iBAAiB,QAAQ,kBAC5BC,YAAW,WACP,IAAMC,EAAK,UAAML,yBAAN,sBACPZ,EAsDpB,SAAiCiB,EAAOR,GACpCS,MAAMD,EAAO,CACTE,QAAS,CAAC,iBAAkB,YAE/BC,MAAK,SAACC,GACH,IAAMC,EAAcD,EAASF,QAAQI,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5Cf,UAAUgB,cAAcC,MAAMP,MAAK,SAACQ,GAChCA,EAAaC,aAAaT,MAAK,WAC7BtB,OAAOI,SAAS4B,eAvDlC,SAAyBb,EAAOR,GAC5BC,UAAUgB,cACTK,SAASd,GACTG,MAAK,SAACQ,GACHA,EAAaI,cAAgB,WACzB,IAAMC,EAAmBL,EAAaM,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiB9C,QACbuB,UAAUgB,cAAcU,YAIxBC,QAAQC,IACJ,iHAIA7B,GAAUA,EAAO8B,UACjB9B,EAAO8B,SAASX,KAMpBS,QAAQC,IAAI,sCAER7B,GAAUA,EAAO+B,WACjB/B,EAAO+B,UAAUZ,WAOxCa,OAAM,SAACC,GACJL,QAAQK,MAAM,4CAA6CA,MAsBvDC,CAAgB1B,EAAOR,MAG9BgC,OAAM,WACHJ,QAAQC,IACN,oEA3EUM,CAAwB3B,EAAOR,GAG/B4B,QAAQC,IAAI,YAEjB,SChBfZ,I,+BChBA,kCAAO,IAAMpC,EAAQ,CACjBC,WAAY,gB","file":"static/js/main.c63106d4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            Developed by : Ajay Dewangan \r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { Suspense, lazy } from 'react';\r\nimport './App.css'\r\nimport Footer from './components/Footer'\r\nconst LeftSection = lazy(() => import('./components/LeftSection'))\r\nconst RightSection = lazy(() => import('./components/RightSection'))\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <header className=\"header\">\r\n        <h1>spacEx Launch Programs</h1>\r\n      </header>\r\n      <div className=\"main\">\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <LeftSection />\r\n          <RightSection />\r\n        </Suspense>     \r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { types } from \"../constants/types\";\r\n\r\nconst initialData = {\r\n    dataList: []\r\n}\r\n\r\nconst DataReducer = (state=initialData, action) => {\r\n    switch (action.type) {\r\n        case types.FETCH_DATA:\r\n            return {...state, dataList:action.payload};       \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default DataReducer","import { combineReducers } from 'redux'\r\nimport DataReducer  from './DataReducer'\r\n\r\nconst reducers = combineReducers({\r\n    allData: DataReducer\r\n})\r\n\r\nexport default reducers","import { createStore } from 'redux'\r\nimport reducers from './reducers/index'\r\n\r\nconst store = createStore(reducers, {}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\nexport default store","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n   \r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374           \r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () =>\r\n            setTimeout(() => {\r\n                const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n                if (isLocalhost) {\r\n                    // This is running on localhost. Let's check if a service worker still exists or not.\r\n                    checkValidServiceWorker(swUrl, config);\r\n                } else {                    \r\n                    // registerValidSW(swUrl, config);\r\n                    console.log('server');\r\n                  }\r\n            }, 3000)\r\n        );        \r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            if (installingWorker == null) {\r\n                return;\r\n            }\r\n            installingWorker.onstatechange = () => {\r\n                if (installingWorker.state === 'installed') {\r\n                    if (navigator.serviceWorker.controller) {\r\n                        // At this point, the updated precached content has been fetched,\r\n                        // but the previous service worker will still serve the older\r\n                        // content until all client tabs are closed.\r\n                        console.log(\r\n                            'New content is available and will be used when all ' +\r\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                        );\r\n                        // Execute callback\r\n                        if (config && config.onUpdate) {\r\n                            config.onUpdate(registration);\r\n                        }\r\n                    } else {\r\n                        // At this point, everything has been precached.\r\n                        // It's the perfect time to display a\r\n                        // \"Content is cached for offline use.\" message.\r\n                        console.log('Content is cached for offline use.');\r\n                        // Execute callback\r\n                        if (config && config.onSuccess) {\r\n                            config.onSuccess(registration);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    })\r\n    .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n    });\r\n};\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'},\r\n    })\r\n    .then((response) => {\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n            response.status === 404 ||\r\n            (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n            // No service worker found. Probably a different app. Reload the page.            \r\n            navigator.serviceWorker.ready.then((registration) => {\r\n                registration.unregister().then(() => {\r\n                  window.location.reload();\r\n                });\r\n            });\r\n        } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl, config);\r\n        }\r\n    })\r\n    .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n    }); \r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n}","import React, { StrictMode } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport { Provider } from 'react-redux'\r\nimport store from './components/redux/store'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>   \r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();","export const types = {\r\n    FETCH_DATA: 'FETCH_DATA',\r\n}"],"sourceRoot":""}